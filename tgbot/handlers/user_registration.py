from aiogram import Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import bold

from tgbot.keyboards.main_menu_inline import main_menu_keyboard, admin_menu_keyboard
from tgbot.keyboards.user_start_inline import user_callback, cancel_keyboard, verification_buttons
from tgbot.misc import subscription
from tgbot.misc.rate_limit import rate_limit
from tgbot.misc.states import User, Codecheck, AdminMenu


@rate_limit(limit=3)
async def user_start(message: Message):
    # try:
    config = message.bot.get('config')
    db = message.bot.get('db')
    allowed_users = []

    chat = await message.bot.get_chat(chat_id=config.channel.channel_id[0])
    arguments = message.get_args()
    list_of_telegram_id = await db.get_telegram_id()

    for user_id in list_of_telegram_id:
        allowed_users.append(user_id[0])

    if message.from_user.id in allowed_users:
        if message.from_user.id in config.tg_bot.admin_ids:
            await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üìÄ</b>\n\n"
                                 "<i>—Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>",
                                 reply_markup=admin_menu_keyboard)
            await AdminMenu.adminMenu.set()
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìÄ",
                                 reply_markup=main_menu_keyboard)
            await User.mainMenu.set()

    elif arguments:
        users_referrals = await db.get_telegram_id()
        for referral_id in users_referrals:
            if arguments == str(referral_id[0]):
                user = await db.select_user(telegram_id=int(arguments))
                await db.add_user(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    referral_id=referral_id[0]
                )
                await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç @{user['username']}")
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
                                     "–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>100üí∞</b>",
                                     reply_markup=main_menu_keyboard)

                await db.change_user_balance(100,
                                             message.from_user.id)

                referral = await db.select_user(telegram_id=referral_id[0])

                await db.change_user_balance(referral['balance'] + 100, referral_id[0])

                await message.bot.send_message(chat_id=referral_id[0],
                                               text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}"
                                                    f" –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>100üí∞</b>")

                await User.mainMenu.set()
                break

            elif arguments == "registration":
                if message.from_user.id in allowed_users:
                    if message.from_user.id in config.tg_bot.admin_ids:
                        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>–ê–¥–º–∏–Ω</b>üìÄ",
                                             reply_markup=admin_menu_keyboard)
                        await AdminMenu.adminMenu.set()
                    else:
                        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìÄ",
                                             reply_markup=main_menu_keyboard)
                        await User.mainMenu.set()
                else:
                    await message.reply(f"–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞üíÆ\n"
                                        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∂–µ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n\n"
                                        f"–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è? –¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{chat['username']}"
                                        f" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É",
                                        reply_markup=verification_buttons)
                    await User.untilApproved.set()

            else:
                await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start")
    else:
        await message.reply(f"‚ùóÔ∏è–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é‚ùó\n"
                            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∂–µ –≤–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n\n"
                            f"–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è? –¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{chat['username']}"
                            f" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É",
                            reply_markup=verification_buttons)
        await User.untilApproved.set()


async def check_subscription_to_chanel(call: types.CallbackQuery):
    await call.answer(cache_time=2)
    result = str()
    config = call.bot.get('config')
    db = call.bot.get('db')

    for channel in config.channel.channel_id:
        status = await subscription.check_subscription(user_id=call.from_user.id,
                                                       channel=channel)
        if status:
            result += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {bold('–û—Ñ–æ—Ä–º–ª–µ–Ω–∞')}!\n\n"
            await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                      reply_markup=main_menu_keyboard)
            await db.add_user(
                username=call.from_user.username,
                telegram_id=call.from_user.id
            )
            await User.mainMenu.set()
        else:
            result += f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª {bold('–Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞')}!"
            await User.untilApproved.set()
    await call.message.edit_text(result, reply_markup=None)


async def check_invite(call: types.CallbackQuery):
    await call.answer(cache_time=2)
    await call.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µüî¢",
                                 reply_markup=cancel_keyboard)
    await Codecheck.Q1.set()


async def check_invite_code_approve(message: Message):
    config = message.bot.get('config')
    db = message.bot.get('db')

    if message.text == config.misc.secret_code:
        await db.add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        await message.answer(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω‚òëÔ∏è!")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=main_menu_keyboard)

        await User.mainMenu.set()
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥‚ùå\n"
                            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã <b>(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤)</b>")

        await Codecheck.Q1.set()


async def cancel_menu(call: CallbackQuery):
    await call.answer(cache_time=2)
    chat = await call.bot.get_chat(chat_id=-1001480349007)
    await call.message.edit_text(f"‚ùó–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚ùó\n"
                                 f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª: @{chat['username']}\n"
                                 f"–ü–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                                 f"–õ–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                                 reply_markup=verification_buttons)
    await User.untilApproved.set()


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(check_invite_code_approve, state=Codecheck.Q1)
    dp.register_callback_query_handler(check_subscription_to_chanel,
                                       user_callback.filter(type="member_check"),
                                       state=User.untilApproved)
    dp.register_callback_query_handler(check_invite,
                                       user_callback.filter(type="invite_code"),
                                       state=User.untilApproved)
    dp.register_callback_query_handler(cancel_menu,
                                       user_callback.filter(type="cancel"),
                                       state="*")
