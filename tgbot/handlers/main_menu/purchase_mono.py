import datetime

import monobank
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from monobank import TooManyRequests

from tgbot.handlers.main_menu.purchase_handler import Purchase
from tgbot.keyboards.admin_inline import admin_main_menu
from tgbot.keyboards.main_menu_inline import main_menu_keyboard
from tgbot.keyboards.purchase_inline import check_payment_mono, purchase_callback, cancel_purchase_inline
from tgbot.misc.states import PurchaseMono, User


async def select_quantity_mono(call: types.CallbackQuery):
    await call.message.delete_reply_markup()
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏üìù")

    await PurchaseMono.checkPayment.set()


async def purchase_buy_mono(message: types.Message, state: FSMContext):
    data = await state.get_data()
    config = message.bot.get('config')
    quantity = int(message.text)
    db = message.bot.get('db')

    await state.update_data(
        user_quantity=quantity
    )

    product = await db.select_product(product_id=data.get('product_id'))
    price = product['price'] * quantity

    link = "https://send.monobank.ua/Cu1UerRfu?f=enable&amount={amount}&text={text}"
    if product['quantity'] >= quantity:
        await message.answer(text=link.format(amount=f"{price}", text=f"{message.from_user.id}"))
        await message.answer(text=f"–û–ø–ª–∞—Ç–∏—Ç–µ —Å—É–º–º—É –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚Ç¥,\n"
                                  f"–ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ãüíµ\n\n"
                                  f"–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –æ—Ç 100‚Ç¥‚ùóÔ∏è\n"
                                  f"–ï—Å–ª–∏ –≤–∞—à–∞ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤—ã—à–µ 100‚Ç¥, —Ç–æ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚ùóÔ∏è",
                             reply_markup=check_payment_mono)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞‚ùå\n\n"
                             "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏üìù",
                             reply_markup=cancel_purchase_inline)

        await PurchaseMono.checkPayment.set()


async def check_payment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=1)
    data = await state.get_data()
    config = call.bot.get('config')
    db = call.bot.get('db')

    data = await state.get_data()
    mono = monobank.Client(config.misc.mono_token)
    product = await db.select_product(product_id=data.get('product_id'))
    user = await db.select_user(telegram_id=call.from_user.id)

    try:
        monoData = mono.get_statements('8aSdZ8Y8L2Wutil0NDHf9A',
                                       datetime.datetime.now() - datetime.timedelta(days=2),
                                       datetime.datetime.now())
        if monoData:
            for k in monoData:
                if k['id'] not in user['purchase_list']:
                    if str(call.from_user.id) in k.values() and str(product['price']) + "00" == str(k['amount']):
                        await call.message.delete_reply_markup()
                        await call.message.answer_photo(photo=product['photo'],
                                                        caption=f"–û–ø–ª–∞—Ç–∞‚úÖ\n\n"
                                                                f"–¢–æ–≤–∞—Ä: <b>{product['name']}</b>\n"
                                                                f"{product['description']}\n\n"
                                                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data.get('user_quantity')}\n"
                                                                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{k['id']}</code>")

                        await db.insert_purchase_list(purchase_id=k['id'],
                                                      telegram_id=call.from_user.id)
                        await db.change_quantity(quantity=product['quantity'] - int(data['user_quantity']),
                                                 product_id=product['product_id'])

                        if call.from_user.id in config.tg_bot.admin_ids:
                            await call.message.answer("Admin Menu",
                                                      reply_markup=admin_main_menu)

                            await User.mainMenu.set()
                        else:
                            await call.message.answer("Main Menu",
                                                      reply_markup=main_menu_keyboard)

                            await User.mainMenu.set()

                        break
            else:
                await call.message.answer(f"–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚ùï\n\n"
                                          f"–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ‚ùî\n"
                                          f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É <b>–ø–æ–º–æ—â—å</b>\n"
                                          f"<i>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é -> –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</i>")

                await PurchaseMono.checkPayment.set()

        else:
            await call.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùî "
                              "–í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å, –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç")

    except TooManyRequests:
        await call.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")


def register_mono_handler(dp: Dispatcher):
    dp.register_callback_query_handler(select_quantity_mono,
                                       purchase_callback.filter(button='purchase_by_mono'),
                                       state=[Purchase.selectedProduct])
    dp.register_message_handler(purchase_buy_mono,
                                state=PurchaseMono.checkPayment)
    dp.register_callback_query_handler(check_payment,
                                       purchase_callback.filter(button="check_payment_mono"),
                                       state=[PurchaseMono.checkPayment])