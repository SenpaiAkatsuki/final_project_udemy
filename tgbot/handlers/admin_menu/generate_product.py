import re
from random import randint

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from tgbot.integrations.telegraph import FileUploader
from tgbot.keyboards.admin_inline import admin_panel_callback, product_creation_cancel, cancel_callback, \
    admin_panel_buttons
from tgbot.misc.db_api.postgres_db import Database
from tgbot.misc.states import AdminMenu, CreateProduct


async def start_create_product(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("üñç–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n\n"
                              "<b>‚ùóÔ∏è–∫–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è‚ùóÔ∏è</b>",
                              reply_markup=product_creation_cancel)

    await call.message.delete_reply_markup()

    await CreateProduct.start_creation.set()


async def catch_id(message: types.Message, state: FSMContext):
    pattern = re.compile(r'^[a-z,A-Z]{1,64}$')  # 1-64 latin letters

    if pattern.match(message.text):
        await message.bot.edit_message_text(chat_id=message.from_user.id,
                                            message_id=message.message_id - 1,
                                            text=f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ‚òëÔ∏èÔ∏è",
                                            reply_markup=None)

        await state.update_data(
            {
                "tag": message.text
            }
        )

        await message.answer("üñç–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∏—Ç—É–ª—å–Ω–æ–µ –∏–º—è</b> —Ç–æ–≤–∞—Ä–∞\n",
                             reply_markup=product_creation_cancel)

        await CreateProduct.step_id.set()

    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùå\n\n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –µ—â–µ —Ä–∞–∑",
                             reply_markup=product_creation_cancel)

        await message.bot.edit_message_reply_markup(chat_id=message.from_user.id,
                                                    message_id=message.message_id - 1,
                                                    reply_markup=None)
        await CreateProduct.start_creation.set()


async def catch_name(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data(
            {
                "name": message.text
            }
        )

        await message.bot.edit_message_text(chat_id=message.from_user.id,
                                            message_id=message.message_id - 1,
                                            text=f"–¢–∏—Ç—É–ª—å–Ω–æ–µ –∏–º—è‚òëÔ∏è\n\n",
                                            reply_markup=None)

        await message.answer("üñç–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞",
                             reply_markup=product_creation_cancel)

        await CreateProduct.step_name.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùå\n\n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–∏—Ç—É–ª—å–Ω–æ–µ –∏–º—è –µ—â–µ —Ä–∞–∑",
                             reply_markup=product_creation_cancel)

        await message.bot.edit_message_reply_markup(chat_id=message.from_user.id,
                                                    message_id=message.message_id - 1,
                                                    reply_markup=None)

        await CreateProduct.step_id.set()


async def catch_description(message: types.Message, state: FSMContext):
    if message.text:
        await state.update_data(
            {
                "description": message.text
            }
        )

        await message.bot.edit_message_text(chat_id=message.from_user.id,
                                            message_id=message.message_id - 1,
                                            text=f"–û–ø–∏—Å–∞–Ω–∏–µ‚òëÔ∏è",
                                            reply_markup=None)

        await message.answer("üñç–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –¥–ª—è —Ç–æ–≤–∞—Ä–∞",
                             reply_markup=product_creation_cancel)

        await CreateProduct.step_description.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùå\n\n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–∏—Ç—É–ª—å–Ω–æ–µ –∏–º—è –µ—â–µ —Ä–∞–∑",
                             reply_markup=product_creation_cancel)

        await message.bot.edit_message_reply_markup(chat_id=message.from_user.id,
                                                    message_id=message.message_id - 1,
                                                    reply_markup=None)

        await CreateProduct.step_name.set()


async def catch_price(message: types.Message, state: FSMContext):
    pattern = re.compile(r'^\d{1,10}$')  # 1-10 digits

    if pattern.match(message.text):
        await state.update_data(
            {
                "price": message.text
            }
        )

        await message.bot.edit_message_text(chat_id=message.from_user.id,
                                            message_id=message.message_id - 1,
                                            text=f"–¶–µ–Ω–∞‚òëÔ∏è",
                                            reply_markup=None)

        await message.answer("üì∑–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞",
                             reply_markup=product_creation_cancel)

        await CreateProduct.step_price.set()

    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞‚ùå\n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=product_creation_cancel)

        await message.bot.edit_message_reply_markup(chat_id=message.from_user.id,
                                                    message_id=message.message_id - 1,
                                                    reply_markup=None)

        await CreateProduct.step_description.set()


async def end_creation_product(message: types.Message, file_uploader: FileUploader, state: FSMContext):
    config = message.bot.get('config')
    db = message.bot.get('db')

    if message.photo:
        photo = message.photo[-1]

        uploaded_photo = await file_uploader.upload_photo(photo)
        await state.update_data(
            {
                "photo": uploaded_photo.link
            }
        )
        await message.bot.edit_message_text(chat_id=message.from_user.id,
                                            message_id=message.message_id - 1,
                                            text=f"–§–æ—Ç–æ‚òëÔ∏è",
                                            reply_markup=None)

        data = await state.get_data()

        await db.create_product(product_id=data.get('tag'),
                                name=data.get('name'),
                                description=data.get('description'),
                                price=int(data.get('price')),
                                photo=data.get('photo'),
                                quantity=randint(1, 100)
                                )

        await message.answer(text="–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚òëÔ∏è\n"
                                  "<b>–ü–æ—è–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</b>",
                             reply_markup=admin_panel_buttons)

        await AdminMenu.adminMenu.set()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç‚ùå\n\n"
                             "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>jpg</b> –∏–ª–∏ <b>png</b>",
                             reply_markup=product_creation_cancel)

        await message.bot.edit_message_reply_markup(chat_id=message.from_user.id,
                                                    message_id=message.message_id - 1,
                                                    reply_markup=None)
        await CreateProduct.step_price.set()


async def cancel_product_creation(call: CallbackQuery):
    await call.message.delete_reply_markup()
    await call.message.answer(f"<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞üìÄ</b>\n\n"
                              f"‚ùå<b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>‚ùå",
                              reply_markup=admin_panel_buttons)

    await AdminMenu.adminMenu.set()


def register_inlineMode_handler_admin(dp: Dispatcher):
    dp.register_callback_query_handler(cancel_product_creation, cancel_callback.filter(button="cancel_action"),
                                       state="*")
    dp.register_callback_query_handler(start_create_product, admin_panel_callback.filter(button="add_product"),
                                       state=AdminMenu.adminMenu)

    dp.register_message_handler(catch_id, state=CreateProduct.start_creation,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(catch_name, state=CreateProduct.step_id,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(catch_description, state=CreateProduct.step_name,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(catch_price, state=CreateProduct.step_description,
                                content_types=types.ContentTypes.ANY)
    dp.register_message_handler(end_creation_product,
                                state=CreateProduct.step_price,
                                content_types=types.ContentTypes.ANY)
